// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34014
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Enigma.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class EnigmaMachineFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "EnigmaMachine.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "EnigmaMachine", "In order to to send secret messages\r\nAs a german officer\r\nI want to be able to en" +
                    "crypt messages before sending them", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "EnigmaMachine")))
            {
                Enigma.Specs.EnigmaMachineFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
 testRunner.Given("I use an Enigma machine model M3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Default Settings Encryption")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "EnigmaMachine")]
        public virtual void DefaultSettingsEncryption()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Default Settings Encryption", ((string[])(null)));
#line 9
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 10
 testRunner.Given("I use an empty plugboard", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Position",
                        "Type",
                        "Ring Setting",
                        "Starting Position"});
            table1.AddRow(new string[] {
                        "Left",
                        "I",
                        "A",
                        "A"});
            table1.AddRow(new string[] {
                        "Middle",
                        "II",
                        "A",
                        "A"});
            table1.AddRow(new string[] {
                        "Right",
                        "III",
                        "A",
                        "A"});
#line 11
 testRunner.And("I have the following rotor combination", ((string)(null)), table1, "And ");
#line 16
 testRunner.And("I use reflector B", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
 testRunner.When("I enter the text: AAAAA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 18
 testRunner.Then("I get the following output: BDZGO", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 19
 testRunner.And("the current letter position of Left rotor is A", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 20
 testRunner.And("the current letter position of Center rotor is A", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
 testRunner.And("the current letter position of Right rotor is F", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Default Settings Decryption")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "EnigmaMachine")]
        public virtual void DefaultSettingsDecryption()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Default Settings Decryption", ((string[])(null)));
#line 23
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 24
 testRunner.Given("I use an empty plugboard", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Position",
                        "Type",
                        "Ring Setting",
                        "Starting Position"});
            table2.AddRow(new string[] {
                        "Left",
                        "I",
                        "A",
                        "A"});
            table2.AddRow(new string[] {
                        "Middle",
                        "II",
                        "A",
                        "A"});
            table2.AddRow(new string[] {
                        "Right",
                        "III",
                        "A",
                        "A"});
#line 25
 testRunner.And("I have the following rotor combination", ((string)(null)), table2, "And ");
#line 30
 testRunner.And("I use reflector B", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
 testRunner.When("I enter the text: BDZGO", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 32
 testRunner.Then("I get the following output: AAAAA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 33
 testRunner.And("the current letter position of Left rotor is A", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
 testRunner.And("the current letter position of Center rotor is A", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
 testRunner.And("the current letter position of Right rotor is F", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Stepping")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "EnigmaMachine")]
        public virtual void Stepping()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Stepping", ((string[])(null)));
#line 37
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 38
 testRunner.Given("I use an empty plugboard", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Position",
                        "Type",
                        "Ring Setting",
                        "Starting Position"});
            table3.AddRow(new string[] {
                        "Left",
                        "I",
                        "A",
                        "A"});
            table3.AddRow(new string[] {
                        "Middle",
                        "II",
                        "A",
                        "A"});
            table3.AddRow(new string[] {
                        "Right",
                        "III",
                        "A",
                        "V"});
#line 39
 testRunner.And("I have the following rotor combination", ((string)(null)), table3, "And ");
#line 44
 testRunner.And("I use reflector B", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 45
 testRunner.When("I enter the text: TEST", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 46
 testRunner.Then("the current letter position of Left rotor is A", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 47
 testRunner.And("the current letter position of Center rotor is B", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 48
 testRunner.And("the current letter position of Right rotor is Z", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Double Stepping")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "EnigmaMachine")]
        public virtual void DoubleStepping()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Double Stepping", ((string[])(null)));
#line 50
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 51
 testRunner.Given("I use an empty plugboard", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Position",
                        "Type",
                        "Ring Setting",
                        "Starting Position"});
            table4.AddRow(new string[] {
                        "Left",
                        "III",
                        "A",
                        "A"});
            table4.AddRow(new string[] {
                        "Middle",
                        "II",
                        "A",
                        "D"});
            table4.AddRow(new string[] {
                        "Right",
                        "I",
                        "A",
                        "O"});
#line 52
 testRunner.And("I have the following rotor combination", ((string)(null)), table4, "And ");
#line 57
 testRunner.And("I use reflector B", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 58
 testRunner.When("I enter the text: COOKIE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 59
 testRunner.Then("the current letter position of Left rotor is B", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 60
 testRunner.And("the current letter position of Center rotor is F", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 61
 testRunner.And("the current letter position of Right rotor is U", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Plugboard")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "EnigmaMachine")]
        public virtual void Plugboard()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Plugboard", ((string[])(null)));
#line 63
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "From",
                        "To"});
            table5.AddRow(new string[] {
                        "A",
                        "F"});
            table5.AddRow(new string[] {
                        "B",
                        "Z"});
            table5.AddRow(new string[] {
                        "E",
                        "R"});
#line 64
 testRunner.Given("I use the following plugboard mappings", ((string)(null)), table5, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Position",
                        "Type",
                        "Ring Setting",
                        "Starting Position"});
            table6.AddRow(new string[] {
                        "Left",
                        "I",
                        "A",
                        "A"});
            table6.AddRow(new string[] {
                        "Middle",
                        "II",
                        "A",
                        "A"});
            table6.AddRow(new string[] {
                        "Right",
                        "III",
                        "A",
                        "A"});
#line 69
 testRunner.And("I have the following rotor combination", ((string)(null)), table6, "And ");
#line 74
 testRunner.And("I use reflector B", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 75
 testRunner.When("I enter the text: COOKIE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 76
 testRunner.Then("I get the following output: XBGSHD", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Cannot Encode Letter Into Itself")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "EnigmaMachine")]
        public virtual void CannotEncodeLetterIntoItself()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot Encode Letter Into Itself", ((string[])(null)));
#line 78
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 79
 testRunner.Given("I use an empty plugboard", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Position",
                        "Type",
                        "Ring Setting",
                        "Starting Position"});
            table7.AddRow(new string[] {
                        "Left",
                        "I",
                        "A",
                        "A"});
            table7.AddRow(new string[] {
                        "Middle",
                        "II",
                        "A",
                        "A"});
            table7.AddRow(new string[] {
                        "Right",
                        "III",
                        "A",
                        "A"});
#line 80
 testRunner.And("I have the following rotor combination", ((string)(null)), table7, "And ");
#line 85
 testRunner.And("I use reflector B", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Position",
                        "Starting Position"});
            table8.AddRow(new string[] {
                        "Left",
                        "A"});
            table8.AddRow(new string[] {
                        "Middle",
                        "A"});
            table8.AddRow(new string[] {
                        "Right",
                        "A"});
#line 86
 testRunner.When("I press the letter A repetidly until I reach the following rotor starting positio" +
                    "n", ((string)(null)), table8, "When ");
#line 91
 testRunner.Then("the distinct letters of the output must not contain the letter A", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 92
 testRunner.And("the distinct letters of the output must have a length of 25", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
